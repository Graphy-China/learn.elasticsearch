#=================================================
#
#  Input : exec
#
#  @message: command's output
#  @command: command.
#
#================================================
input {

  exec {
	  # commons
    add_field => {}
    codec => "plain"
		type => "gcc" # The type is stored as part of the event itself, so you can also use the type to search for it in Kibana

		tags => ["Compile"]
		tags => "globe"

		# exec configs.
		interval => 10   #[R]
		command  => "ls -l" #[R]
		
  }
}

filter {
  split {  # split message into sub messages.
	  field => "message"  # which field is to be splitted.
		#terminator => "\n"  #
		target => "message" #
		
	}

	csv {  # parse map message into key/value pairs.
	  source  => "message"
		target  => "file_info"
	  columns => ["access", "t", "owner", "group", "size", "month", "day", "time", "filename"]
		#quote_char => "\""
    separator  => " "
	}

	ruby { # combine fields.
	  add_field => {"file_info[fstamp]" => "2015-%{file_info[month]}-%{file_info[day]} %{file_info[time]}"}
		remove_field => ["file_info[month]", "file_info[day]","file_info[time]"]
		code => "
		event.cancel if event['file_info']['size'].nil?   
		event['test'] = 99999
		"
		#add_field => {"@timestamp" => "%{file_info[filetime]}"}
	}
	
	ruby { # remove files whose size leess than
			 code => "
			 event.remove('command')
			 filesize = event['file_info']['size'].to_i
			 event.cancel if  filesize < 4097
			 
			 
			 event['type'] = (filesize > 40000) ? 'largefile':'smallfile'
       "
	}

	alter {
#	   coalesce => [ "fieldname", "value1", "value2" ]
#		 condrewrite => [ "fieldname", "expectvalue", "new_value" ]
#		 condrewriteother => ["fieldname", "expectvalue", "other_filed", "value"]
		 condrewrite => [ "host", "chnxsc1274", "13.187.240.72" ]

	}

	extractnumbers {
	 source => "file_info[size]"
	}

	checksum {
	   algorithm => "sha"
		 keys => ["host", "file_info[size]", "file_info[filename]"]
	}

	clone {
	  clones => ["smallfile"]
	}
}

output {
	 stdout {
	 	 codec => "rubydebug"
	 }
}
